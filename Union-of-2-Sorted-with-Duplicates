// C++ code

class Solution {
  public:
    // a,b : the arrays
    // Function to return a list containing the union of the two arrays.
    vector<int> findUnion(vector<int> &a, vector<int> &b) {
        vector<int> ans;
        int i=0;
        int j=0;
        int n=a.size();
        int m=b.size();
        while(i<n && j<m){
            if(a[i]>b[j]){
                if(ans.size()==0 || b[j]!=ans[ans.size()-1]){
                    ans.push_back(b[j]);
                }
                j++;
            }
            else if(a[i]<b[j]){
                if(ans.size()==0 || a[i]!=ans[ans.size()-1]){
                    ans.push_back(a[i]);
                }
                i++;
            }
            else{
                if(ans.size()==0 || ans[ans.size()-1]!=a[i]){
                    ans.push_back(a[i]);
                }
                i++;
                j++;
            }
        }
        while(i<n){
            if(ans.size()==0 || a[i]!=ans[ans.size()-1]){
                ans.push_back(a[i]);
                i++;
            }
            
        }
        while(j<m){
            if(ans.size()==0 || b[j]!=ans[ans.size()-1]){
                    ans.push_back(b[j]);
                    j++;
                }
                
        }
        return ans;
    }
};

// JAVA code

class Solution {
    // Function to return a list containing the union of the two arrays.
    public static ArrayList<Integer> findUnion(int a[], int b[]) {
        int i=0;
        int j=0;
        int n=a.length;
        int m=b.length;
        ArrayList<Integer> ans=new ArrayList<>();
        while(i<n && j<m){
            if(a[i]>b[j]){
                if(ans.size()==0 || ans.get(ans.size()-1)!=b[j]){
                    ans.add(b[j]);
                }
                j++;
            }
            else if(a[i]<b[j]){
                if(ans.size()==0 || ans.get(ans.size()-1)!=a[i]){
                    ans.add(a[i]);
                }
                i++;
            }
            else{
                if(ans.size()==0 || ans.get(ans.size()-1)!=a[i]){
                    ans.add(a[i]);
                }
                i++;
                j++;
            }
        }
        while(i<n){
            if(ans.size()==0 || ans.get(ans.size()-1)!=a[i]){
                    ans.add(a[i]);
                }
                i++;
        }
        while(j<m){
            if(ans.size()==0 || ans.get(ans.size()-1)!=b[j]){
                    ans.add(b[j]);
                }
                j++;
        }
        return ans;
        
    }
}
